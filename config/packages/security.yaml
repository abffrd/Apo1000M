security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider

            form_login:
                # name of the route created previously
                login_path: app_login # GET => affiche le form
                check_path: app_login # POST => traite le form
                #default_target_path: app_home  #Redirige vers la page d'accueil : "app_home"

                enable_csrf: true
    #remember_me:
            #secret: '%kernel.secret%'
            #signature_properties: [password]
            logout:
                path: app_logout

                # where to redirect after logout
                target: app_login
            custom_authenticator: App\Security\LoginFormAuthenticator
            entry_point: App\Security\LoginFormAuthenticator
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        #- { path: ^/utilisateur, roles: ROLE_ADMIN }
        
        - { path: ^/accueil, roles: ROLE_USER }
        - { path: ^/profile, roles: ROLE_USER }
       
        # Login et register toujours accessible
        - { path: ^/register, roles: PUBLIC_ACCESS }
        - { path: ^/, roles: PUBLIC_ACCESS }
        
       

    role_hierarchy:
        # BENEVOLE hérite du rôle USER
        ROLE_BENEVOLE: ROLE_USER
        # RESPONSABLE_POLE hérite du rôle BENEVOLE
        ROLE_RESPONSABLE_POLE: ROLE_BENEVOLE
        # MEMBRE_BUREAU hérite du rôle RESPONSABLE_POLE
        ROLE_MEMBRE_BUREAU: ROLE_RESPONSABLE_POLE
        # ADMIN hérite du rôle MEMBRE_BUREAU
        ROLE_ADMIN: ROLE_MEMBRE_BUREAU
    
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
